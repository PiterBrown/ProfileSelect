@model ProfileSelect.ViewModels.ClaimViewModel
@{
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    ViewBag.Title = "Написать заявление №" + Model.ClaimNuber;
}

<div class="table-responsive col-md-12">
    <h3 >Написать заявление @*№@Model.ClaimNuber*@</h3>
    <h4 >Заполните форму, расставив приоритеты в порядке убывания, где 1 - самый приоритетный (желаемый) профиль или блок дисциплин</h4>
    <h4 ><strong>Внимание!</strong>
    <ul>
        <li>Приоритеты не могут повторяться в столбце "Приоритет профиля"</li>
        <li>Приоритеты не могут повторяться в столбце "Приоритет дисциплин" среди строк, принадлежащих одному профилю</li>
        </ul></h4>
    @using (Html.BeginForm("GeneratePdf", "Home", FormMethod.Get, new { Area = "Student", target = "_blank", id = "send-data-form" }))
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Название профиля</th>
                    <th>Приоритет профиля</th>
                    <th>Дисциплины</th>
                    <th>Приоритет дисциплин</th>
                </tr>
            </thead>
            @{
                var i = 0;
                var m = 0;
                var k = 0;
               
            }
            @foreach (var cl in Model.Profiles.Where(p => p.DirectionId == Model.Direction))
            {
                k = 0;
                var rowcountBlock = Model.BlockComps.Where(bc => bc.ProfileId == cl.Id && !bc.BlockIsDelete).GroupBy(bc => bc.BlockId).Count();
                var rowcountProfile = Model.Profiles.Where(p => p.DirectionId == Model.Direction).Count();
                <input type="hidden" name="ProfilePriorities[@i].Id" value="@cl.Id" />
                if (Model.BlockComps.Where(bc => bc.ProfileId == cl.Id && !bc.BlockIsDelete).Any())
                {
                    <tbody class="block">
                        @foreach (var bl in Model.BlockComps.Where(bc => bc.ProfileId == cl.Id && !bc.BlockIsDelete).GroupBy(bc => bc.BlockId))
                        {


                            <input type="hidden" name="BlockPriorities[@m].Id" value="@bl.Key" />
                            if (k == 0)
                            {
                            <tr>
                                <td rowspan="@rowcountBlock">@cl.Name</td>
                                @if (rowcountProfile != 1)
                                {
                                    <td rowspan="@rowcountBlock"><input type="number" min="1" max="@rowcountProfile" class="form-control user-selected-number profile-priority" style="width: 70px" name="ProfilePriorities[@i].Priority" value="" /></td>
                                }
                                else
                                {
                                    <th rowspan="@rowcountBlock">НЕ ТРЕБУЕТСЯ</th>
                                }
                                <td>
                                    <ul>
                                        @foreach (var s in bl.Where(b => b.DirectionId == cl.DirectionId))
                                        {
                                            <li>@s.SubjectName</li>}
                                    </ul>
                                </td>
                                @if (rowcountBlock != 1)
                                {
                                    <td><input type="number" min="1" max="@rowcountBlock" class="form-control user-selected-number block-priority" style="width: 70px" name="BlockPriorities[@m].Priority" value="" /></td>
                                }
                                else
                                {
                                    <th>НЕ УКАЗЫВАТЬ</th>
                                }
                            </tr>

                            }
                            else
                            {
                                <tr>
                                    <td>
                                        <ul>
                                            @foreach (var s in bl)
                                            {
                                                <li>@s.SubjectName</li>}
                                        </ul>
                                    </td>
                                    <td><input type="number" min="1" max="@rowcountBlock" class="form-control user-selected-number block-priority" style="width: 70px" name="BlockPriorities[@m].Priority" value="" /></td>
                                </tr>

                            }

                            k++;
                            m++;


                        }
                    </tbody>
                }
                else
                {
                    <tbody class="block">
                        <tr>
                            <td>@cl.Name</td>
                            <td><input type="number" min="1" max="@rowcountProfile" class="form-control user-selected-number profile-priority" style="width: 70px" name="ProfilePriorities[@i].Priority" value="" /></td>
                            <th>НЕ ПРИМЕНИМО</th>
                            <th>НЕ УКАЗЫВАТЬ</th>
                        </tr>
                    </tbody>
                }
                i++;
            }
        </table>
        <h4><strong>Внимание!</strong> Заявление необходимо распечатать, подписать и сдать куратору учебной группы до 08.06.2019! Без сданного заявления Ваш выбор учитываться не будет!</h4><br>
        <input type="submit" class="btn btn-primary" value="Распечатать заявление" />
        //<a class="btn btn-primary" href=@Url.Action("Index","Home",new {Area = "Student"})>Отправить заявление</a>
    }
</div>

@section scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        jQuery.extend(jQuery.validator.messages, {
            required: "Требуется"
        });
        jQuery.validator.addMethod("notEqualToGroup",
            function (value, element, options) {
                // get all the elements passed here with the same class
                var elems = $(element).parents(options[1] ? '.block' : 'form').find(options[0]);
                var valueToCompare = value;
                // count
                var matchesFound = 0;
                // loop each element and compare its value with the current value and increase the count every time we find one
                jQuery.each(elems,
                    function () {
                        var thisVal = $(this).val();
                        if (thisVal === valueToCompare) {
                            matchesFound++;
                        }
                    });
                // count should be either 0 or 1 max
                if (this.optional(element) || matchesFound <= 1) {
                    elems.removeClass('text-danger');
                    return true;
                } else {
                    elems.addClass('text-danger');
                }
            },
            jQuery.format("Не должно быть одинаковых значений"));

        $("#send-data-form").validate({
            rules: Object.assign(
                {},
                Array.from(Array(4).keys()).reduce((obj, i) => {
                    obj[`ProfilePriorities[${i}].Priority`] = {
                        required: true,
                        notEqualToGroup: [".user-selected-number.profile-priority"]
                    };

                    return obj;
                }, {}),
                Array.from(Array(7).keys()).reduce((obj, i) => {
                    obj[`BlockPriorities[${i}].Priority`] = {
                        required: true,
                        notEqualToGroup: [".user-selected-number.block-priority", true]
                    };
                    return obj;
                }, {})
            )
        });
    </script>
}
